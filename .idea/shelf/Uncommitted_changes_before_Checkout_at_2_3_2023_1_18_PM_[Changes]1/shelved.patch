Index: src/utils/StandardizeColor.js
===================================================================
diff --git a/src/utils/StandardizeColor.js b/src/utils/StandardizeColor.js
deleted file mode 100644
--- a/src/utils/StandardizeColor.js	
+++ /dev/null	
@@ -1,33 +0,0 @@
-export default function standardize_color(str) {
-  var ctx = document.createElement('canvas').getContext('2d');
-  ctx.fillStyle = str;
-  return ctx.fillStyle;
-}
-
-export function invertColor(hex, bw) {
-  if (hex.indexOf('#') === 0) {
-    hex = hex.slice(1);
-  }
-  // convert 3-digit hex to 6-digits.
-  if (hex.length === 3) {
-    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
-  }
-  if (hex.length !== 6) {
-    throw new Error('Invalid HEX color.');
-  }
-  var r = parseInt(hex.slice(0, 2), 16),
-    g = parseInt(hex.slice(2, 4), 16),
-    b = parseInt(hex.slice(4, 6), 16);
-  if (bw) {
-    // https://stackoverflow.com/a/3943023/112731
-    return (r * 0.299 + g * 0.587 + b * 0.114) > 186
-      ? '#000000'
-      : '#FFFFFF';
-  }
-  // invert color components
-  r = (255 - r).toString(16);
-  g = (255 - g).toString(16);
-  b = (255 - b).toString(16);
-  // pad each with zeros and return
-  return "#" + padZero(r) + padZero(g) + padZero(b);
-}
\ No newline at end of file
Index: src/utils/getAverageColor.js
===================================================================
diff --git a/src/utils/getAverageColor.js b/src/utils/getAverageColor.js
deleted file mode 100644
--- a/src/utils/getAverageColor.js	
+++ /dev/null	
@@ -1,46 +0,0 @@
-export function getAverageRGB(imgEl) {
-  var blockSize = 5, // only visit every 5 pixels
-    defaultRGB = { r: 0, g: 0, b: 0 }, // for non-supporting envs
-    canvas = document.createElement("canvas"),
-    context = canvas.getContext && canvas.getContext("2d"),
-    data,
-    width,
-    height,
-    i = -4,
-    length,
-    rgb = { r: 0, g: 0, b: 0 },
-    count = 0;
-
-  if (!context) {
-    return defaultRGB;
-  }
-
-  height = canvas.height =
-    imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
-  width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
-
-  context.drawImage(imgEl, 0, 0);
-
-  try {
-    data = context.getImageData(0, 0, width, height);
-  } catch (e) {
-    /* security error, img on diff domain */
-    return defaultRGB;
-  }
-
-  length = data.data.length;
-
-  while ((i += blockSize * 4) < length) {
-    ++count;
-    rgb.r += data.data[i];
-    rgb.g += data.data[i + 1];
-    rgb.b += data.data[i + 2];
-  }
-
-  // ~~ used to floor values
-  rgb.r = ~~(rgb.r / count);
-  rgb.g = ~~(rgb.g / count);
-  rgb.b = ~~(rgb.b / count);
-
-  return rgb;
-}
\ No newline at end of file
